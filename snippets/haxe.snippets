snippet main
	static function main() {
		${1:/* code */}
	}
snippet pu
	public
snippet pr
	private
snippet st
	static
snippet dy
	dynamic
snippet ov
	override

# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}

# Anonymous Function
snippet f
	function(${1}) {${2}};

snippet re
	return
snippet br
	break;


snippet ca
	catch(${1:e} : ${2:Error}) {
		${3:// TODO: Handle exception}
	}
snippet th
	throw 



snippet im
	import
snippet fl
	flash.
snippet fl9
	flash9.
snippet hx
	haxe.


# if
snippet if
	if (${1:true}) {
		${2}
	}

# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}

# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}

# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}

# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}

# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}

# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}

# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});



snippet tc
	class ${1:`Filename()`} extends ${2:haxe.unit.TestCase} {
		${3}
	}

snippet t
	public function test${1:Name}() {
		${2}
	}

snippet cl
	class ${1:`Filename("", "untitled")`} ${2} {
		 ${3}
	}

snippet in
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent} {
		${3}
	}

snippet v
	${1:var} ${2:foo}${3: = null}${4};${5}

# TODO: Add unit tests asserts, add comments, additional imports, etc.
